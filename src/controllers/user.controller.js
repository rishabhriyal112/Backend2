import { ApiError } from "../utils/ApiError.js";
import { asyncHandler } from "../utils/asyncHandler.js";
import { User } from "../models/user.model.js";
import { uploadOnCloudinary } from "../utils/cloudinary.js";
import { ApiResponse } from "../utils/ApiResponse.js";

const registerUser = asyncHandler(async (req, res) => {
    // get User details
    // Validation - not empty
    // Check if user already exists : we will use username and email to check it
    // Check for images , Check for Avatar
    // Upload them to cloudinary , avatar
    // Create user object - create entry in db (NoSQL db use objects mainly)
    // Remove Password and Referesh token field from response because we dont wanna show the password and referesh token after registration
    // Check user creation
    // Then return the response  : return res

    // 1. Get User details
    const { fullName, email, username, password } = req.body;
    console.log("Request body:", req.body);
    console.log("fullName:", fullName, "email:", email, "username:", username);

    // 2. Validation like if any of the fields shouldn't be empty
    // This line checks if any of the input fields (fullName, email, username, password) are empty or just spaces.
    // It uses the .some() method, which returns true if at least one element in the array meets the given condition which is if any of them are empty.
    if ([fullName, email, username, password].some((field) => field?.trim() === "")) {
        throw new ApiError(400, "All Fields are Required");
    }

    // 3.Check if User is already exists so that they didnt register twice
    const existedUser = await User.findOne({ //User.findOne() → is a Mongoose method used to find a single document (record) in the DB
        $or: [{ username }, { email }] //$or is a MongoDB query operator meaning “find a user where either the username or the email matches”
    })

    //This code checks your database to see if the entered email or username already exists, and if it does, it throws a clear 409 Conflict error to prevent duplicate users.
    if (existedUser) {
        throw new ApiError(409, "User with email or username already exists");
    }

    // 4. Check for images and Avatars
    //safely extracts the local file path of the uploaded avatar and  coverImage from the request object.
    // It uses optional chaining (?.) to prevent errors if the avatar , coverImage or file data doesn’t exist.
    // In short, it gets the path where the uploaded avatar or coverImage is temporarily stored on the server.
    const avatarLocalPath = req.files?.avatar[0]?.path;
    // const coverImageLocalPath = req.files?.coverImage[0]?.path;
    //Also instead of this above coverImageLocalPath code for coverImage if we dont pass any coverImage it will give you errors so for that we have to write conditional statement like this :
    let coverImageLocalPath;
    if(req.files && Array.isArray(req.files.coverImage) && req.files.coverImage.length > 0 ){
        coverImageLocalPath = req.files.coverImage[0].path
    }


    if (!avatarLocalPath) {
        throw new ApiError(400, "Avatar file is required")
    } //Also we dont write the same code for coverImage because it is not a required field because user can upload the cover image or not.

    // 5.  Upload them to cloudinary , avatar
    const avatar = await uploadOnCloudinary(avatarLocalPath);
    const coverImage = await uploadOnCloudinary(coverImageLocalPath);

    if(!avatar){
        throw new ApiError(400,"Avatar file is required")
    }

    // 6. Create user object - create entry in db (NoSQL db use objects mainly)
    const user = await User.create({
        fullName,
        avatar : avatar.url,
        coverImage : coverImage?.url || "",
        email,
        password,
        username : username.toLowerCase()
    })
    
    // 7. Remove Password and Referesh token field from response because we dont wanna show the password and referesh token after registration
    //This line is used to get the details of the newly created user from the database using their ID which is generated by mongoDB itself. It helps make sure the data we send back is safe in reponse to user  by removing sensitive information like the password and refresh token. In short, it’s used to show only the user’s public details after registration, keeping private data secure.
    const createdUser = await User.findById(user._id).select( "-password -refreshToken")

    // 8. Check user creation
    if(!createdUser){   //If user didnt created then throw this error 
        throw new ApiError(500 , "Something went wrong while registering the user");
    }

    return res.status(201).json(
        new ApiResponse(200 , createdUser , "User Registered Successfully")
    )
}) 


export { registerUser };
